;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;#define LED PORTD.1
;#define LED_BUTTON PIND.0
;
;
;
;    int counter = 0;
;    char LCD_BUFER[10];
;    char buf[10];
;    float Voltage = 0;
;
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016      ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0017     // Delay needed for the stabilization of the ADC input voltage
; 0000 0018     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0019     // Start the AD conversion
; 0000 001A     ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001B     // Wait for the AD conversion to complete
; 0000 001C     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001D     ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001E     return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001F }
;PCODE: $00000021 VOL: 0
;void Read_and_Display_Voltage(void){
; 0000 0020 void Read_and_Display_Voltage(void){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0021       lcd_gotoxy(0,1);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0022       lcd_puts("U= ");
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0023       lcd_gotoxy(2,1);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0024       delay_ms(100);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0025       Voltage = (read_adc(0) / 51.1) * 3.1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0026       ftoa(Voltage,1,buf);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0027       lcd_puts(buf);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0028 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0

	.DSEG
_0x6:
	.BYTE 0x4
;void Read_and_Display_RPM(void){
; 0000 0029 void Read_and_Display_RPM(void){

	.CSEG
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002A   counter *= 60;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002B   lcd_gotoxy(0,0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002C   lcd_puts("RPM ");
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002D   lcd_gotoxy(4,0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 002E   itoa(counter,LCD_BUFER);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 002F   lcd_puts(LCD_BUFER);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0030   counter = 0;
;PCODE: $0000005B VOL: 0
; 0000 0031 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0

	.DSEG
_0x7:
	.BYTE 0x5
;void Init_Timer(void)
; 0000 0033 {

	.CSEG
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0034     TCCR1A=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0035     TCCR1B=0x05;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0036     TCNT1=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0037     OCR1A=0x1E85;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0038     TIMSK=0x10;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0039 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;void Init_ExtInterrupt(void)
; 0000 003B {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003C  GICR|=(1<<INT1) | (0<<INT0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003D  MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 003E  GIFR=(1<<INTF1) | (0<<INTF0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 003F }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;void Init_ADC(void)
; 0000 0041 {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0042     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0043     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0044     SFIOR=(0<<ACME);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0045 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 004A {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004B   lcd_clear();   //Що разу чистимо буфер дсплею
;PCODE: $00000083 VOL: 0
; 0000 004C 
; 0000 004D   Read_and_Display_RPM();
;PCODE: $00000084 VOL: 0
; 0000 004E 
; 0000 004F   Read_and_Display_Voltage();
;PCODE: $00000085 VOL: 0
; 0000 0050 
; 0000 0051   TCNT1=0; //обнуляем таймер
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0052   }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0056 {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0057  counter++;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0058 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;
;void main(void)
; 0000 005B {
;PCODE: $00000093 VOL: 0
; 0000 005C     Init_Timer();
;PCODE: $00000094 VOL: 0
; 0000 005D     Init_ExtInterrupt();
;PCODE: $00000095 VOL: 0
; 0000 005E     Init_ADC();
;PCODE: $00000096 VOL: 0
; 0000 005F     lcd_init(8);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0060     lcd_clear();
;PCODE: $00000099 VOL: 0
; 0000 0061 
; 0000 0062     #asm("sei") // Global Enable Interrupt
;PCODE: $0000009A VOL: 0
	sei
;PCODE: $0000009B VOL: 0
; 0000 0063 LED = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0064 
; 0000 0065 while (1)
;PCODE: $0000009E VOL: 0
; 0000 0066       {
; 0000 0067        if(LED_BUTTON == 0)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0068        {
; 0000 0069         LED = 1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006A        }
; 0000 006B 
; 0000 006C        else
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006D        {
; 0000 006E         LED = 0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006F        }
;PCODE: $000000A8 VOL: 0
; 0000 0070 
; 0000 0071       };
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0072     }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
