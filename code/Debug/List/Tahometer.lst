
AVRASM ver. 2.1.30  D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm Thu Mar 19 22:55:28 2015

D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1086): warning: Register r4 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1088): warning: Register r11 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1090): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c032      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 c0ee      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c0cb      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0000      	.DB  0x0,0x0
                 
                 _0x0:
000014 3d55
000015 0020
000016 5052
000017 204d      	.DB  0x55,0x3D,0x20,0x0,0x52,0x50,0x4D,0x20
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1125): warning: .cseg .db misalignment - padding zero byte
000018 0000      	.DB  0x0
                 _0x2000003:
000019 c080      	.DB  0x80,0xC0
                 _0x2020000:
00001a 4e2d
00001b 4e41
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1129): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040060:
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1131): warning: .cseg .db misalignment - padding zero byte
00001d 0001      	.DB  0x1
                 _0x2040000:
00001e 4e2d
00001f 4e41
000020 4900
000021 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Радіо_електроніка\cxem\мої проекти\Тахометр_вольтметр\Debug\List\Tahometer.asm(1134): warning: .cseg .db misalignment - padding zero byte
000022 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000023 0002      	.DW  0x02
000024 0004      	.DW  0x04
000025 0026      	.DW  __REG_VARS*2
                 
000026 0004      	.DW  0x04
000027 0160      	.DW  _0x6
000028 0028      	.DW  _0x0*2
                 
000029 0005      	.DW  0x05
00002a 0164      	.DW  _0x7
00002b 002c      	.DW  _0x0*2+4
                 
00002c 0002      	.DW  0x02
00002d 0181      	.DW  __base_y_G100
00002e 0032      	.DW  _0x2000003*2
                 
00002f 0001      	.DW  0x01
000030 0185      	.DW  __seed_G102
000031 003a      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e c09e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;#define LED PORTD.1
                 ;#define LED_BUTTON PIND.0
                 ;
                 ;
                 ;
                 ;    int counter = 0;
                 ;    char LCD_BUFER[10];
                 ;    char buf[10];
                 ;    float Voltage = 0;
                 ;
                 ;
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0016      ADMUX=adc_input | ADC_VREF_TYPE;
00005f 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000060 81e8      	LD   R30,Y
000061 b9e7      	OUT  0x7,R30
                 ; 0000 0017     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0018     delay_us(10);
                +
000062 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000063 958a     +DEC R24
000064 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0019     // Start the AD conversion
                 ; 0000 001A     ADCSRA|=(1<<ADSC);
000065 9a36      	SBI  0x6,6
                 ; 0000 001B     // Wait for the AD conversion to complete
                 ; 0000 001C     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000066 9b34      	SBIS 0x6,4
000067 cffe      	RJMP _0x3
                 ; 0000 001D     ADCSRA|=(1<<ADIF);
000068 9a34      	SBI  0x6,4
                 ; 0000 001E     return ADCW;
000069 b1e4      	IN   R30,0x4
00006a b1f5      	IN   R31,0x4+1
00006b c121      	RJMP _0x20C0004
                 ; 0000 001F }
                 ; .FEND
                 ;void Read_and_Display_Voltage(void){
                 ; 0000 0020 void Read_and_Display_Voltage(void){
                 _Read_and_Display_Voltage:
                 ; .FSTART _Read_and_Display_Voltage
                 ; 0000 0021       lcd_gotoxy(0,1);
00006c e0e0      	LDI  R30,LOW(0)
00006d 93ea      	ST   -Y,R30
00006e e0a1      	LDI  R26,LOW(1)
00006f d0b7      	RCALL _lcd_gotoxy
                 ; 0000 0022       lcd_puts("U= ");
                +
000070 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
000071 e0b1     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
000072 d0e3      	RCALL _lcd_puts
                 ; 0000 0023       lcd_gotoxy(2,1);
000073 e0e2      	LDI  R30,LOW(2)
000074 93ea      	ST   -Y,R30
000075 e0a1      	LDI  R26,LOW(1)
000076 d0b0      	RCALL _lcd_gotoxy
                 ; 0000 0024       delay_ms(100);
000077 e6a4      	LDI  R26,LOW(100)
000078 d220      	RCALL SUBOPT_0x0
                 ; 0000 0025       Voltage = (read_adc(0) / 51.1) * 3.1;
000079 e0a0      	LDI  R26,LOW(0)
00007a dfe4      	RCALL _read_adc
00007b 2766      	CLR  R22
00007c 2777      	CLR  R23
00007d d2e8      	RCALL __CDF1
00007e 01df      	MOVW R26,R30
00007f 01cb      	MOVW R24,R22
                +
000080 e6e6     +LDI R30 , LOW ( 0x424C6666 )
000081 e6f6     +LDI R31 , HIGH ( 0x424C6666 )
000082 e46c     +LDI R22 , BYTE3 ( 0x424C6666 )
000083 e472     +LDI R23 , BYTE4 ( 0x424C6666 )
                 	__GETD1N 0x424C6666
000084 d3b9      	RCALL __DIVF21
                +
000085 e6a6     +LDI R26 , LOW ( 0x40466666 )
000086 e6b6     +LDI R27 , HIGH ( 0x40466666 )
000087 e486     +LDI R24 , BYTE3 ( 0x40466666 )
000088 e490     +LDI R25 , BYTE4 ( 0x40466666 )
                 	__GETD2N 0x40466666
000089 d366      	RCALL __MULF12
00008a 93e0 017d 	STS  _Voltage,R30
00008c 93f0 017e 	STS  _Voltage+1,R31
00008e 9360 017f 	STS  _Voltage+2,R22
000090 9370 0180 	STS  _Voltage+3,R23
                 ; 0000 0026       ftoa(Voltage,1,buf);
000092 d44b      	RCALL __PUTPARD1
000093 e0e1      	LDI  R30,LOW(1)
000094 93ea      	ST   -Y,R30
000095 e7a3      	LDI  R26,LOW(_buf)
000096 e0b1      	LDI  R27,HIGH(_buf)
000097 d124      	RCALL _ftoa
                 ; 0000 0027       lcd_puts(buf);
000098 e7a3      	LDI  R26,LOW(_buf)
000099 e0b1      	LDI  R27,HIGH(_buf)
00009a d0bb      	RCALL _lcd_puts
                 ; 0000 0028 }
00009b 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x4
                 ;void Read_and_Display_RPM(void){
                 ; 0000 0029 void Read_and_Display_RPM(void){
                 
                 	.CSEG
                 _Read_and_Display_RPM:
                 ; .FSTART _Read_and_Display_RPM
                 ; 0000 002A   counter *= 60;
00009c 01f2      	MOVW R30,R4
00009d e3ac      	LDI  R26,LOW(60)
00009e e0b0      	LDI  R27,HIGH(60)
00009f d41c      	RCALL __MULW12
0000a0 012f      	MOVW R4,R30
                 ; 0000 002B   lcd_gotoxy(0,0);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 93ea      	ST   -Y,R30
0000a3 e0a0      	LDI  R26,LOW(0)
0000a4 d082      	RCALL _lcd_gotoxy
                 ; 0000 002C   lcd_puts("RPM ");
                +
0000a5 e6a4     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000a6 e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000a7 d0ae      	RCALL _lcd_puts
                 ; 0000 002D   lcd_gotoxy(4,0);
0000a8 e0e4      	LDI  R30,LOW(4)
0000a9 93ea      	ST   -Y,R30
0000aa e0a0      	LDI  R26,LOW(0)
0000ab d07b      	RCALL _lcd_gotoxy
                 ; 0000 002E   itoa(counter,LCD_BUFER);
0000ac 925a      	ST   -Y,R5
0000ad 924a      	ST   -Y,R4
0000ae e6a9      	LDI  R26,LOW(_LCD_BUFER)
0000af e0b1      	LDI  R27,HIGH(_LCD_BUFER)
0000b0 d0de      	RCALL _itoa
                 ; 0000 002F   lcd_puts(LCD_BUFER);
0000b1 e6a9      	LDI  R26,LOW(_LCD_BUFER)
0000b2 e0b1      	LDI  R27,HIGH(_LCD_BUFER)
0000b3 d0a2      	RCALL _lcd_puts
                 ; 0000 0030   counter = 0;
0000b4 2444      	CLR  R4
0000b5 2455      	CLR  R5
                 ; 0000 0031 }
0000b6 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000164           	.BYTE 0x5
                 ;void Init_Timer(void)
                 ; 0000 0033 {
                 
                 	.CSEG
                 _Init_Timer:
                 ; .FSTART _Init_Timer
                 ; 0000 0034     TCCR1A=0x00;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bdef      	OUT  0x2F,R30
                 ; 0000 0035     TCCR1B=0x05;
0000b9 e0e5      	LDI  R30,LOW(5)
0000ba bdee      	OUT  0x2E,R30
                 ; 0000 0036     TCNT1=0x00;
0000bb d1df      	RCALL SUBOPT_0x1
                 ; 0000 0037     OCR1A=0x1E85;
0000bc e8e5      	LDI  R30,LOW(7813)
0000bd e1fe      	LDI  R31,HIGH(7813)
0000be bdfb      	OUT  0x2A+1,R31
0000bf bdea      	OUT  0x2A,R30
                 ; 0000 0038     TIMSK=0x10;
0000c0 e1e0      	LDI  R30,LOW(16)
0000c1 bfe9      	OUT  0x39,R30
                 ; 0000 0039 }
0000c2 9508      	RET
                 ; .FEND
                 ;void Init_ExtInterrupt(void)
                 ; 0000 003B {
                 _Init_ExtInterrupt:
                 ; .FSTART _Init_ExtInterrupt
                 ; 0000 003C  GICR|=(1<<INT1) | (0<<INT0);
0000c3 b7eb      	IN   R30,0x3B
0000c4 68e0      	ORI  R30,0x80
0000c5 bfeb      	OUT  0x3B,R30
                 ; 0000 003D  MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c6 e0ec      	LDI  R30,LOW(12)
0000c7 bfe5      	OUT  0x35,R30
                 ; 0000 003E  GIFR=(1<<INTF1) | (0<<INTF0);
0000c8 e8e0      	LDI  R30,LOW(128)
0000c9 bfea      	OUT  0x3A,R30
                 ; 0000 003F }
0000ca 9508      	RET
                 ; .FEND
                 ;void Init_ADC(void)
                 ; 0000 0041 {
                 _Init_ADC:
                 ; .FSTART _Init_ADC
                 ; 0000 0042     ADMUX=ADC_VREF_TYPE;
0000cb e0e0      	LDI  R30,LOW(0)
0000cc b9e7      	OUT  0x7,R30
                 ; 0000 0043     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000cd e8e7      	LDI  R30,LOW(135)
0000ce b9e6      	OUT  0x6,R30
                 ; 0000 0044     SFIOR=(0<<ACME);
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfe0      	OUT  0x30,R30
                 ; 0000 0045 }
0000d1 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 004A {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000d2 920a      	ST   -Y,R0
0000d3 921a      	ST   -Y,R1
0000d4 92fa      	ST   -Y,R15
0000d5 936a      	ST   -Y,R22
0000d6 937a      	ST   -Y,R23
0000d7 938a      	ST   -Y,R24
0000d8 939a      	ST   -Y,R25
0000d9 93aa      	ST   -Y,R26
0000da 93ba      	ST   -Y,R27
0000db 93ea      	ST   -Y,R30
0000dc 93fa      	ST   -Y,R31
0000dd b7ef      	IN   R30,SREG
0000de 93ea      	ST   -Y,R30
                 ; 0000 004B   lcd_clear();   //Що разу чистимо буфер дсплею
0000df d054      	RCALL _lcd_clear
                 ; 0000 004C 
                 ; 0000 004D   Read_and_Display_RPM();
0000e0 dfbb      	RCALL _Read_and_Display_RPM
                 ; 0000 004E 
                 ; 0000 004F   Read_and_Display_Voltage();
0000e1 df8a      	RCALL _Read_and_Display_Voltage
                 ; 0000 0050 
                 ; 0000 0051   TCNT1=0; //обнуляем таймер
0000e2 d1b8      	RCALL SUBOPT_0x1
                 ; 0000 0052   }
0000e3 91e9      	LD   R30,Y+
0000e4 bfef      	OUT  SREG,R30
0000e5 91f9      	LD   R31,Y+
0000e6 91e9      	LD   R30,Y+
0000e7 91b9      	LD   R27,Y+
0000e8 91a9      	LD   R26,Y+
0000e9 9199      	LD   R25,Y+
0000ea 9189      	LD   R24,Y+
0000eb 9179      	LD   R23,Y+
0000ec 9169      	LD   R22,Y+
0000ed 90f9      	LD   R15,Y+
0000ee 9019      	LD   R1,Y+
0000ef 9009      	LD   R0,Y+
0000f0 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0056 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000f1 93ea      	ST   -Y,R30
0000f2 93fa      	ST   -Y,R31
0000f3 b7ef      	IN   R30,SREG
0000f4 93ea      	ST   -Y,R30
                 ; 0000 0057  counter++;
0000f5 01f2      	MOVW R30,R4
0000f6 9631      	ADIW R30,1
0000f7 012f      	MOVW R4,R30
                 ; 0000 0058 }
0000f8 91e9      	LD   R30,Y+
0000f9 bfef      	OUT  SREG,R30
0000fa 91f9      	LD   R31,Y+
0000fb 91e9      	LD   R30,Y+
0000fc 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005B {
                 _main:
                 ; .FSTART _main
                 ; 0000 005C     Init_Timer();
0000fd dfb9      	RCALL _Init_Timer
                 ; 0000 005D     Init_ExtInterrupt();
0000fe dfc4      	RCALL _Init_ExtInterrupt
                 ; 0000 005E     Init_ADC();
0000ff dfcb      	RCALL _Init_ADC
                 ; 0000 005F     lcd_init(8);
000100 e0a8      	LDI  R26,LOW(8)
000101 d064      	RCALL _lcd_init
                 ; 0000 0060     lcd_clear();
000102 d031      	RCALL _lcd_clear
                 ; 0000 0061 
                 ; 0000 0062     #asm("sei") // Global Enable Interrupt
000103 9478      	sei
                 ; 0000 0063 LED = 0;
000104 9891      	CBI  0x12,1
                 ; 0000 0064 
                 ; 0000 0065 while (1)
                 _0xA:
                 ; 0000 0066       {
                 ; 0000 0067        if(LED_BUTTON == 0)
000105 9980      	SBIC 0x10,0
000106 c002      	RJMP _0xD
                 ; 0000 0068        {
                 ; 0000 0069         LED = 1;
000107 9a91      	SBI  0x12,1
                 ; 0000 006A        }
                 ; 0000 006B 
                 ; 0000 006C        else
000108 c001      	RJMP _0x10
                 _0xD:
                 ; 0000 006D        {
                 ; 0000 006E         LED = 0;
000109 9891      	CBI  0x12,1
                 ; 0000 006F        }
                 _0x10:
                 ; 0000 0070 
                 ; 0000 0071       };
00010a cffa      	RJMP _0xA
                 ; 0000 0072     }
                 _0x13:
00010b cfff      	RJMP _0x13
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00010c 93aa      	ST   -Y,R26
00010d b3e8      	IN   R30,0x18
00010e 7fe0      	ANDI R30,LOW(0xF0)
00010f 2fae      	MOV  R26,R30
000110 81e8      	LD   R30,Y
000111 95e2      	SWAP R30
000112 70ef      	ANDI R30,0xF
000113 2bea      	OR   R30,R26
000114 bbe8      	OUT  0x18,R30
000115 d18a      	RCALL SUBOPT_0x2
000116 9a97      	SBI  0x12,7
000117 d188      	RCALL SUBOPT_0x2
000118 9897      	CBI  0x12,7
000119 d186      	RCALL SUBOPT_0x2
00011a c072      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00011b 93aa      	ST   -Y,R26
00011c 81a8      	LD   R26,Y
00011d dfee      	RCALL __lcd_write_nibble_G100
00011e 81e8          ld    r30,y
00011f 95e2          swap  r30
000120 83e8          st    y,r30
000121 81a8      	LD   R26,Y
000122 dfe9      	RCALL __lcd_write_nibble_G100
                +
000123 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000124 958a     +DEC R24
000125 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000126 c066      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000127 93aa      	ST   -Y,R26
000128 81e8      	LD   R30,Y
000129 e0f0      	LDI  R31,0
00012a 57ef      	SUBI R30,LOW(-__base_y_G100)
00012b 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00012c 81e0      	LD   R30,Z
00012d 81a9      	LDD  R26,Y+1
00012e 0fae      	ADD  R26,R30
00012f dfeb      	RCALL __lcd_write_data
000130 80b9      	LDD  R11,Y+1
000131 80a8      	LDD  R10,Y+0
000132 9622      	ADIW R28,2
000133 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000134 e0a2      	LDI  R26,LOW(2)
000135 dfe5      	RCALL __lcd_write_data
000136 e0a3      	LDI  R26,LOW(3)
000137 d161      	RCALL SUBOPT_0x0
000138 e0ac      	LDI  R26,LOW(12)
000139 dfe1      	RCALL __lcd_write_data
00013a e0a1      	LDI  R26,LOW(1)
00013b dfdf      	RCALL __lcd_write_data
00013c e0a3      	LDI  R26,LOW(3)
00013d d15b      	RCALL SUBOPT_0x0
00013e e0e0      	LDI  R30,LOW(0)
00013f 2eae      	MOV  R10,R30
000140 2ebe      	MOV  R11,R30
000141 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000142 93aa      	ST   -Y,R26
000143 81a8      	LD   R26,Y
000144 30aa      	CPI  R26,LOW(0xA)
000145 f011      	BREQ _0x2000005
000146 14bd      	CP   R11,R13
000147 f040      	BRLO _0x2000004
                 _0x2000005:
000148 e0e0      	LDI  R30,LOW(0)
000149 93ea      	ST   -Y,R30
00014a 94a3      	INC  R10
00014b 2daa      	MOV  R26,R10
00014c dfda      	RCALL _lcd_gotoxy
00014d 81a8      	LD   R26,Y
00014e 30aa      	CPI  R26,LOW(0xA)
00014f f1e9      	BREQ _0x20C0004
                 _0x2000004:
000150 94b3      	INC  R11
000151 9a95      	SBI  0x12,5
000152 81a8      	LD   R26,Y
000153 dfc7      	RCALL __lcd_write_data
000154 9895      	CBI  0x12,5
000155 c037      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000156 d14d      	RCALL SUBOPT_0x3
000157 931a      	ST   -Y,R17
                 _0x2000008:
000158 81a9      	LDD  R26,Y+1
000159 81ba      	LDD  R27,Y+1+1
00015a 91ed      	LD   R30,X+
00015b 83a9      	STD  Y+1,R26
00015c 83ba      	STD  Y+1+1,R27
00015d 2f1e      	MOV  R17,R30
00015e 30e0      	CPI  R30,0
00015f f019      	BREQ _0x200000A
000160 2fa1      	MOV  R26,R17
000161 dfe0      	RCALL _lcd_putchar
000162 cff5      	RJMP _0x2000008
                 _0x200000A:
000163 8118      	LDD  R17,Y+0
000164 9623      	ADIW R28,3
000165 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000166 93aa      	ST   -Y,R26
000167 b3e7      	IN   R30,0x17
000168 60ef      	ORI  R30,LOW(0xF)
000169 bbe7      	OUT  0x17,R30
00016a 9a8f      	SBI  0x11,7
00016b 9a8d      	SBI  0x11,5
00016c 9a8e      	SBI  0x11,6
00016d 9897      	CBI  0x12,7
00016e 9895      	CBI  0x12,5
00016f 9896      	CBI  0x12,6
000170 80d8      	LDD  R13,Y+0
000171 81e8      	LD   R30,Y
000172 58e0      	SUBI R30,-LOW(128)
                +
000173 93e0 0183+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000175 81e8      	LD   R30,Y
000176 54e0      	SUBI R30,-LOW(192)
                +
000177 93e0 0184+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000179 e1a4      	LDI  R26,LOW(20)
00017a d11e      	RCALL SUBOPT_0x0
00017b d12b      	RCALL SUBOPT_0x4
00017c d12a      	RCALL SUBOPT_0x4
00017d d129      	RCALL SUBOPT_0x4
00017e e2a0      	LDI  R26,LOW(32)
00017f df8c      	RCALL __lcd_write_nibble_G100
                +
000180 ec88     +LDI R24 , LOW ( 200 )
000181 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000182 9701     +SBIW R24 , 1
000183 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000184 e2a8      	LDI  R26,LOW(40)
000185 df95      	RCALL __lcd_write_data
000186 e0a4      	LDI  R26,LOW(4)
000187 df93      	RCALL __lcd_write_data
000188 e8a5      	LDI  R26,LOW(133)
000189 df91      	RCALL __lcd_write_data
00018a e0a6      	LDI  R26,LOW(6)
00018b df8f      	RCALL __lcd_write_data
00018c dfa7      	RCALL _lcd_clear
                 _0x20C0004:
00018d 9621      	ADIW R28,1
00018e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00018f d114      	RCALL SUBOPT_0x3
000190 91a9          ld   r26,y+
000191 91b9          ld   r27,y+
000192 91e9          ld   r30,y+
000193 91f9          ld   r31,y+
000194 9630          adiw r30,0
000195 f42a          brpl __itoa0
000196 95e0          com  r30
000197 95f0          com  r31
000198 9631          adiw r30,1
000199 e26d          ldi  r22,'-'
00019a 936d          st   x+,r22
                 __itoa0:
00019b 94e8          clt
00019c e180          ldi  r24,low(10000)
00019d e297          ldi  r25,high(10000)
00019e d00d          rcall __itoa1
00019f ee88          ldi  r24,low(1000)
0001a0 e093          ldi  r25,high(1000)
0001a1 d00a          rcall __itoa1
0001a2 e684          ldi  r24,100
0001a3 2799          clr  r25
0001a4 d007          rcall __itoa1
0001a5 e08a          ldi  r24,10
0001a6 d005          rcall __itoa1
0001a7 2f6e          mov  r22,r30
0001a8 d010          rcall __itoa5
0001a9 2766          clr  r22
0001aa 936c          st   x,r22
0001ab 9508          ret
                 
                 __itoa1:
0001ac 2766          clr	 r22
                 __itoa2:
0001ad 17e8          cp   r30,r24
0001ae 07f9          cpc  r31,r25
0001af f020          brlo __itoa3
0001b0 9563          inc  r22
0001b1 1be8          sub  r30,r24
0001b2 0bf9          sbc  r31,r25
0001b3 f7c9          brne __itoa2
                 __itoa3:
0001b4 2366          tst  r22
0001b5 f411          brne __itoa4
0001b6 f016          brts __itoa5
0001b7 9508          ret
                 __itoa4:
0001b8 9468          set
                 __itoa5:
0001b9 5d60          subi r22,-0x30
0001ba 936d          st   x+,r22
0001bb 9508          ret
                 ; .FEND
                 _ftoa:
                 ; .FSTART _ftoa
0001bc d0e7      	RCALL SUBOPT_0x3
0001bd 9724      	SBIW R28,4
0001be e0e0      	LDI  R30,LOW(0)
0001bf 83e8      	ST   Y,R30
0001c0 83e9      	STD  Y+1,R30
0001c1 83ea      	STD  Y+2,R30
0001c2 e3ef      	LDI  R30,LOW(63)
0001c3 83eb      	STD  Y+3,R30
0001c4 d330      	RCALL __SAVELOCR2
0001c5 85eb      	LDD  R30,Y+11
0001c6 85fc      	LDD  R31,Y+11+1
0001c7 3fef      	CPI  R30,LOW(0xFFFF)
0001c8 efaf      	LDI  R26,HIGH(0xFFFF)
0001c9 07fa      	CPC  R31,R26
0001ca f429      	BRNE _0x204000D
0001cb d0e2      	RCALL SUBOPT_0x5
                +
0001cc e3ac     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
0001cd e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
0001ce d07e      	RCALL _strcpyf
0001cf c07a      	RJMP _0x20C0003
                 _0x204000D:
0001d0 3fef      	CPI  R30,LOW(0x7FFF)
0001d1 e7af      	LDI  R26,HIGH(0x7FFF)
0001d2 07fa      	CPC  R31,R26
0001d3 f429      	BRNE _0x204000C
0001d4 d0d9      	RCALL SUBOPT_0x5
                +
0001d5 e3ad     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
0001d6 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
0001d7 d075      	RCALL _strcpyf
0001d8 c071      	RJMP _0x20C0003
                 _0x204000C:
0001d9 85ac      	LDD  R26,Y+12
0001da 23aa      	TST  R26
0001db f432      	BRPL _0x204000F
0001dc d0d6      	RCALL SUBOPT_0x6
0001dd d11c      	RCALL __ANEGF1
0001de d0d9      	RCALL SUBOPT_0x7
0001df d0dd      	RCALL SUBOPT_0x8
0001e0 e2ed      	LDI  R30,LOW(45)
0001e1 93ec      	ST   X,R30
                 _0x204000F:
0001e2 85a8      	LDD  R26,Y+8
0001e3 30a7      	CPI  R26,LOW(0x7)
0001e4 f010      	BRLO _0x2040010
0001e5 e0e6      	LDI  R30,LOW(6)
0001e6 87e8      	STD  Y+8,R30
                 _0x2040010:
0001e7 8518      	LDD  R17,Y+8
                 _0x2040011:
0001e8 2fe1      	MOV  R30,R17
0001e9 5011      	SUBI R17,1
0001ea 30e0      	CPI  R30,0
0001eb f021      	BREQ _0x2040013
0001ec d0d7      	RCALL SUBOPT_0x9
0001ed d0db      	RCALL SUBOPT_0xA
0001ee d0e0      	RCALL SUBOPT_0xB
0001ef cff8      	RJMP _0x2040011
                 _0x2040013:
0001f0 d0e3      	RCALL SUBOPT_0xC
0001f1 d1ae      	RCALL __ADDF12
0001f2 d0c5      	RCALL SUBOPT_0x7
0001f3 e010      	LDI  R17,LOW(0)
                +
0001f4 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001f5 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001f6 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001f7 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001f8 d0d6      	RCALL SUBOPT_0xB
                 _0x2040014:
0001f9 d0da      	RCALL SUBOPT_0xC
0001fa d288      	RCALL __CMPF12
0001fb f060      	BRLO _0x2040016
0001fc d0c7      	RCALL SUBOPT_0x9
0001fd d0df      	RCALL SUBOPT_0xD
0001fe d0d0      	RCALL SUBOPT_0xB
0001ff 5f1f      	SUBI R17,-LOW(1)
000200 3217      	CPI  R17,39
000201 f028      	BRLO _0x2040017
000202 d0ab      	RCALL SUBOPT_0x5
                +
000203 e4a1     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
000204 e0b0     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
000205 d047      	RCALL _strcpyf
000206 c043      	RJMP _0x20C0003
                 _0x2040017:
000207 cff1      	RJMP _0x2040014
                 _0x2040016:
000208 3010      	CPI  R17,0
000209 f421      	BRNE _0x2040018
00020a d0b2      	RCALL SUBOPT_0x8
00020b e3e0      	LDI  R30,LOW(48)
00020c 93ec      	ST   X,R30
00020d c01e      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
00020e 2fe1      	MOV  R30,R17
00020f 5011      	SUBI R17,1
000210 30e0      	CPI  R30,0
000211 f0d1      	BREQ _0x204001C
000212 d0b1      	RCALL SUBOPT_0x9
000213 d0b5      	RCALL SUBOPT_0xA
                +
000214 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000215 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000216 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000217 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000218 d187      	RCALL __ADDF12
000219 01df      	MOVW R26,R30
00021a 01cb      	MOVW R24,R22
00021b d06d      	RCALL _floor
00021c d0b2      	RCALL SUBOPT_0xB
00021d d0b6      	RCALL SUBOPT_0xC
00021e d21f      	RCALL __DIVF21
00021f d10d      	RCALL __CFD1U
000220 2f0e      	MOV  R16,R30
000221 d09b      	RCALL SUBOPT_0x8
000222 d0c0      	RCALL SUBOPT_0xE
000223 d0a0      	RCALL SUBOPT_0x9
000224 d28a      	RCALL __CWD1
000225 d140      	RCALL __CDF1
000226 d1c9      	RCALL __MULF12
000227 d0c1      	RCALL SUBOPT_0xF
000228 d2bf      	RCALL __SWAPD12
000229 d16f      	RCALL __SUBF12
00022a d08d      	RCALL SUBOPT_0x7
00022b cfe2      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
00022c 85e8      	LDD  R30,Y+8
00022d 30e0      	CPI  R30,0
00022e f0b9      	BREQ _0x20C0002
00022f d08d      	RCALL SUBOPT_0x8
000230 e2ee      	LDI  R30,LOW(46)
000231 93ec      	ST   X,R30
                 _0x204001E:
000232 85e8      	LDD  R30,Y+8
000233 50e1      	SUBI R30,LOW(1)
000234 87e8      	STD  Y+8,R30
000235 5fef      	SUBI R30,-LOW(1)
000236 f079      	BREQ _0x2040020
000237 d0b1      	RCALL SUBOPT_0xF
000238 d0a4      	RCALL SUBOPT_0xD
000239 d07e      	RCALL SUBOPT_0x7
00023a d078      	RCALL SUBOPT_0x6
00023b d0f1      	RCALL __CFD1U
00023c 2f0e      	MOV  R16,R30
00023d d07f      	RCALL SUBOPT_0x8
00023e d0a4      	RCALL SUBOPT_0xE
00023f d0a9      	RCALL SUBOPT_0xF
000240 d26e      	RCALL __CWD1
000241 d124      	RCALL __CDF1
000242 d2a5      	RCALL __SWAPD12
000243 d155      	RCALL __SUBF12
000244 d073      	RCALL SUBOPT_0x7
000245 cfec      	RJMP _0x204001E
                 _0x2040020:
                 _0x20C0002:
000246 81ae      	LDD  R26,Y+6
000247 81bf      	LDD  R27,Y+6+1
000248 e0e0      	LDI  R30,LOW(0)
000249 93ec      	ST   X,R30
                 _0x20C0003:
00024a d2ad      	RCALL __LOADLOCR2
00024b 962d      	ADIW R28,13
00024c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
00024d d056      	RCALL SUBOPT_0x3
00024e 91e9          ld   r30,y+
00024f 91f9          ld   r31,y+
000250 91a9          ld   r26,y+
000251 91b9          ld   r27,y+
000252 01cd          movw r24,r26
                 strcpyf0:
000253 9005      	lpm  r0,z+
000254 920d          st   x+,r0
000255 2000          tst  r0
000256 f7e1          brne strcpyf0
000257 01fc          movw r30,r24
000258 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000259 d289      	RCALL __PUTPARD2
00025a 817b         ldd  r23,y+3
00025b 816a         ldd  r22,y+2
00025c 81f9         ldd  r31,y+1
00025d 81e8         ld   r30,y
00025e fb77         bst  r23,7
00025f 0f77         lsl  r23
000260 fd67         sbrc r22,7
000261 6071         sbr  r23,1
000262 2f97         mov  r25,r23
000263 579e         subi r25,0x7e
000264 f081         breq __ftrunc0
000265 f078         brcs __ftrunc0
000266 3198         cpi  r25,24
000267 f490         brsh __ftrunc1
000268 27aa         clr  r26
000269 27bb         clr  r27
00026a 2788         clr  r24
                 __ftrunc2:
00026b 9408         sec
00026c 9587         ror  r24
00026d 95b7         ror  r27
00026e 95a7         ror  r26
00026f 959a         dec  r25
000270 f7d1         brne __ftrunc2
000271 23ea         and  r30,r26
000272 23fb         and  r31,r27
000273 2368         and  r22,r24
000274 c005         rjmp __ftrunc1
                 __ftrunc0:
000275 94e8         clt
000276 2777         clr  r23
000277 27ee         clr  r30
000278 27ff         clr  r31
000279 2766         clr  r22
                 __ftrunc1:
00027a 776f         cbr  r22,0x80
00027b 9576         lsr  r23
00027c f408         brcc __ftrunc3
00027d 6860         sbr  r22,0x80
                 __ftrunc3:
00027e f977         bld  r23,7
00027f 91a9         ld   r26,y+
000280 91b9         ld   r27,y+
000281 9189         ld   r24,y+
000282 9199         ld   r25,y+
000283 17ea         cp   r30,r26
000284 07fb         cpc  r31,r27
000285 0768         cpc  r22,r24
000286 0779         cpc  r23,r25
000287 fb97         bst  r25,7
000288 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000289 d259      	RCALL __PUTPARD2
00028a d249      	RCALL __GETD2S0
00028b dfcd      	RCALL _ftrunc
00028c d24c      	RCALL __PUTD1S0
00028d f411          brne __floor1
                 __floor0:
00028e d05f      	RCALL SUBOPT_0x10
00028f c007      	RJMP _0x20C0001
                 __floor1:
000290 f7ee          brtc __floor0
000291 d05c      	RCALL SUBOPT_0x10
                +
000292 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000293 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000294 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000295 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000296 d102      	RCALL __SUBF12
                 _0x20C0001:
000297 9624      	ADIW R28,4
000298 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _LCD_BUFER:
000169           	.BYTE 0xA
                 _buf:
000173           	.BYTE 0xA
                 _Voltage:
00017d           	.BYTE 0x4
                 __base_y_G100:
000181           	.BYTE 0x4
                 __seed_G102:
000185           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000299 e0b0      	LDI  R27,0
00029a c055      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00029b e0e0      	LDI  R30,LOW(0)
00029c e0f0      	LDI  R31,HIGH(0)
00029d bdfd      	OUT  0x2C+1,R31
00029e bdec      	OUT  0x2C,R30
00029f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
                +
0002a0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002a1 958a     +DEC R24
0002a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002a4 93ba      	ST   -Y,R27
0002a5 93aa      	ST   -Y,R26
0002a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
0002a7 e3a0      	LDI  R26,LOW(48)
0002a8 de63      	RCALL __lcd_write_nibble_G100
                +
0002a9 ec88     +LDI R24 , LOW ( 200 )
0002aa e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ab 9701     +SBIW R24 , 1
0002ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0002ae 81ee      	LDD  R30,Y+6
0002af 81ff      	LDD  R31,Y+6+1
0002b0 93fa      	ST   -Y,R31
0002b1 93ea      	ST   -Y,R30
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
0002b3 85e9     +LDD R30 , Y + 9
0002b4 85fa     +LDD R31 , Y + 9 + 1
0002b5 856b     +LDD R22 , Y + 9 + 2
0002b6 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0002b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
                +
0002b8 87e9     +STD Y + 9 , R30
0002b9 87fa     +STD Y + 9 + 1 , R31
0002ba 876b     +STD Y + 9 + 2 , R22
0002bb 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0002bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
0002bd 81ae      	LDD  R26,Y+6
0002be 81bf      	LDD  R27,Y+6+1
0002bf 9611      	ADIW R26,1
0002c0 83ae      	STD  Y+6,R26
0002c1 83bf      	STD  Y+6+1,R27
0002c2 9711      	SBIW R26,1
0002c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
                +
0002c4 81aa     +LDD R26 , Y + 2
0002c5 81bb     +LDD R27 , Y + 2 + 1
0002c6 818c     +LDD R24 , Y + 2 + 2
0002c7 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0002c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
                +
0002c9 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0002ca ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0002cb ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0002cc e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0002cd d122      	RCALL __MULF12
0002ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
                +
0002cf 83ea     +STD Y + 2 , R30
0002d0 83fb     +STD Y + 2 + 1 , R31
0002d1 836c     +STD Y + 2 + 2 , R22
0002d2 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0002d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xC:
                +
0002d4 81ea     +LDD R30 , Y + 2
0002d5 81fb     +LDD R31 , Y + 2 + 1
0002d6 816c     +LDD R22 , Y + 2 + 2
0002d7 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0002d8 85a9     +LDD R26 , Y + 9
0002d9 85ba     +LDD R27 , Y + 9 + 1
0002da 858b     +LDD R24 , Y + 9 + 2
0002db 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0002dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
                +
0002dd e0e0     +LDI R30 , LOW ( 0x41200000 )
0002de e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002df e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002e0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002e1 d10e      	RCALL __MULF12
0002e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0002e3 2fe0      	MOV  R30,R16
0002e4 5de0      	SUBI R30,-LOW(48)
0002e5 93ec      	ST   X,R30
0002e6 2fe0      	MOV  R30,R16
0002e7 e0f0      	LDI  R31,0
0002e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
                +
0002e9 85a9     +LDD R26 , Y + 9
0002ea 85ba     +LDD R27 , Y + 9 + 1
0002eb 858b     +LDD R24 , Y + 9 + 2
0002ec 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0002ee d1e0      	RCALL __GETD1S0
0002ef 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002f0 9610      	adiw r26,0
0002f1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002f2 ed80     +LDI R24 , LOW ( 0x7D0 )
0002f3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002f4 9701     +SBIW R24 , 1
0002f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002f6 95a8      	wdr
0002f7 9711      	sbiw r26,1
0002f8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002f9 9508      	ret
                 
                 	.equ __w1_port=0x12
                 	.equ __w1_bit=0x02
                 
                 __ANEGF1:
0002fa 9730      	SBIW R30,0
0002fb 4060      	SBCI R22,0
0002fc 4070      	SBCI R23,0
0002fd f009      	BREQ __ANEGF10
0002fe 5870      	SUBI R23,0x80
                 __ANEGF10:
0002ff 9508      	RET
                 
                 __ROUND_REPACK:
000300 2355      	TST  R21
000301 f442      	BRPL __REPACK
000302 3850      	CPI  R21,0x80
000303 f411      	BRNE __ROUND_REPACK0
000304 ffe0      	SBRS R30,0
000305 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000306 9631      	ADIW R30,1
000307 1f69      	ADC  R22,R25
000308 1f79      	ADC  R23,R25
000309 f06b      	BRVS __REPACK1
                 
                 __REPACK:
00030a e850      	LDI  R21,0x80
00030b 2757      	EOR  R21,R23
00030c f411      	BRNE __REPACK0
00030d 935f      	PUSH R21
00030e c0cf      	RJMP __ZERORES
                 __REPACK0:
00030f 3f5f      	CPI  R21,0xFF
000310 f031      	BREQ __REPACK1
000311 0f66      	LSL  R22
000312 0c00      	LSL  R0
000313 9557      	ROR  R21
000314 9567      	ROR  R22
000315 2f75      	MOV  R23,R21
000316 9508      	RET
                 __REPACK1:
000317 935f      	PUSH R21
000318 2000      	TST  R0
000319 f00a      	BRMI __REPACK2
00031a c0cf      	RJMP __MAXRES
                 __REPACK2:
00031b c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00031c e850      	LDI  R21,0x80
00031d 2e19      	MOV  R1,R25
00031e 2215      	AND  R1,R21
00031f 0f88      	LSL  R24
000320 1f99      	ROL  R25
000321 2795      	EOR  R25,R21
000322 0f55      	LSL  R21
000323 9587      	ROR  R24
                 
                 __UNPACK1:
000324 e850      	LDI  R21,0x80
000325 2e07      	MOV  R0,R23
000326 2205      	AND  R0,R21
000327 0f66      	LSL  R22
000328 1f77      	ROL  R23
000329 2775      	EOR  R23,R21
00032a 0f55      	LSL  R21
00032b 9567      	ROR  R22
00032c 9508      	RET
                 
                 __CFD1U:
00032d 9468      	SET
00032e c001      	RJMP __CFD1U0
                 __CFD1:
00032f 94e8      	CLT
                 __CFD1U0:
000330 935f      	PUSH R21
000331 dff2      	RCALL __UNPACK1
000332 3870      	CPI  R23,0x80
000333 f018      	BRLO __CFD10
000334 3f7f      	CPI  R23,0xFF
000335 f408      	BRCC __CFD10
000336 c0a7      	RJMP __ZERORES
                 __CFD10:
000337 e156      	LDI  R21,22
000338 1b57      	SUB  R21,R23
000339 f4aa      	BRPL __CFD11
00033a 9551      	NEG  R21
00033b 3058      	CPI  R21,8
00033c f40e      	BRTC __CFD19
00033d 3059      	CPI  R21,9
                 __CFD19:
00033e f030      	BRLO __CFD17
00033f efef      	SER  R30
000340 efff      	SER  R31
000341 ef6f      	SER  R22
000342 e77f      	LDI  R23,0x7F
000343 f977      	BLD  R23,7
000344 c01a      	RJMP __CFD15
                 __CFD17:
000345 2777      	CLR  R23
000346 2355      	TST  R21
000347 f0b9      	BREQ __CFD15
                 __CFD18:
000348 0fee      	LSL  R30
000349 1fff      	ROL  R31
00034a 1f66      	ROL  R22
00034b 1f77      	ROL  R23
00034c 955a      	DEC  R21
00034d f7d1      	BRNE __CFD18
00034e c010      	RJMP __CFD15
                 __CFD11:
00034f 2777      	CLR  R23
                 __CFD12:
000350 3058      	CPI  R21,8
000351 f028      	BRLO __CFD13
000352 2fef      	MOV  R30,R31
000353 2ff6      	MOV  R31,R22
000354 2f67      	MOV  R22,R23
000355 5058      	SUBI R21,8
000356 cff9      	RJMP __CFD12
                 __CFD13:
000357 2355      	TST  R21
000358 f031      	BREQ __CFD15
                 __CFD14:
000359 9576      	LSR  R23
00035a 9567      	ROR  R22
00035b 95f7      	ROR  R31
00035c 95e7      	ROR  R30
00035d 955a      	DEC  R21
00035e f7d1      	BRNE __CFD14
                 __CFD15:
00035f 2000      	TST  R0
000360 f40a      	BRPL __CFD16
000361 d145      	RCALL __ANEGD1
                 __CFD16:
000362 915f      	POP  R21
000363 9508      	RET
                 
                 __CDF1U:
000364 9468      	SET
000365 c001      	RJMP __CDF1U0
                 __CDF1:
000366 94e8      	CLT
                 __CDF1U0:
000367 9730      	SBIW R30,0
000368 4060      	SBCI R22,0
000369 4070      	SBCI R23,0
00036a f0b1      	BREQ __CDF10
00036b 2400      	CLR  R0
00036c f026      	BRTS __CDF11
00036d 2377      	TST  R23
00036e f412      	BRPL __CDF11
00036f 9400      	COM  R0
000370 d136      	RCALL __ANEGD1
                 __CDF11:
000371 2e17      	MOV  R1,R23
000372 e17e      	LDI  R23,30
000373 2011      	TST  R1
                 __CDF12:
000374 f032      	BRMI __CDF13
000375 957a      	DEC  R23
000376 0fee      	LSL  R30
000377 1fff      	ROL  R31
000378 1f66      	ROL  R22
000379 1c11      	ROL  R1
00037a cff9      	RJMP __CDF12
                 __CDF13:
00037b 2fef      	MOV  R30,R31
00037c 2ff6      	MOV  R31,R22
00037d 2d61      	MOV  R22,R1
00037e 935f      	PUSH R21
00037f df8a      	RCALL __REPACK
000380 915f      	POP  R21
                 __CDF10:
000381 9508      	RET
                 
                 __SWAPACC:
000382 934f      	PUSH R20
000383 01af      	MOVW R20,R30
000384 01fd      	MOVW R30,R26
000385 01da      	MOVW R26,R20
000386 01ab      	MOVW R20,R22
000387 01bc      	MOVW R22,R24
000388 01ca      	MOVW R24,R20
000389 2d40      	MOV  R20,R0
00038a 2c01      	MOV  R0,R1
00038b 2e14      	MOV  R1,R20
00038c 914f      	POP  R20
00038d 9508      	RET
                 
                 __UADD12:
00038e 0fea      	ADD  R30,R26
00038f 1ffb      	ADC  R31,R27
000390 1f68      	ADC  R22,R24
000391 9508      	RET
                 
                 __NEGMAN1:
000392 95e0      	COM  R30
000393 95f0      	COM  R31
000394 9560      	COM  R22
000395 5fef      	SUBI R30,-1
000396 4fff      	SBCI R31,-1
000397 4f6f      	SBCI R22,-1
000398 9508      	RET
                 
                 __SUBF12:
000399 935f      	PUSH R21
00039a df81      	RCALL __UNPACK
00039b 3890      	CPI  R25,0x80
00039c f171      	BREQ __ADDF129
00039d e850      	LDI  R21,0x80
00039e 2615      	EOR  R1,R21
                 
00039f c004      	RJMP __ADDF120
                 
                 __ADDF12:
0003a0 935f      	PUSH R21
0003a1 df7a      	RCALL __UNPACK
0003a2 3890      	CPI  R25,0x80
0003a3 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003a4 3870      	CPI  R23,0x80
0003a5 f121      	BREQ __ADDF128
                 __ADDF121:
0003a6 2f57      	MOV  R21,R23
0003a7 1b59      	SUB  R21,R25
0003a8 f12b      	BRVS __ADDF1211
0003a9 f412      	BRPL __ADDF122
0003aa dfd7      	RCALL __SWAPACC
0003ab cffa      	RJMP __ADDF121
                 __ADDF122:
0003ac 3158      	CPI  R21,24
0003ad f018      	BRLO __ADDF123
0003ae 27aa      	CLR  R26
0003af 27bb      	CLR  R27
0003b0 2788      	CLR  R24
                 __ADDF123:
0003b1 3058      	CPI  R21,8
0003b2 f028      	BRLO __ADDF124
0003b3 2fab      	MOV  R26,R27
0003b4 2fb8      	MOV  R27,R24
0003b5 2788      	CLR  R24
0003b6 5058      	SUBI R21,8
0003b7 cff9      	RJMP __ADDF123
                 __ADDF124:
0003b8 2355      	TST  R21
0003b9 f029      	BREQ __ADDF126
                 __ADDF125:
0003ba 9586      	LSR  R24
0003bb 95b7      	ROR  R27
0003bc 95a7      	ROR  R26
0003bd 955a      	DEC  R21
0003be f7d9      	BRNE __ADDF125
                 __ADDF126:
0003bf 2d50      	MOV  R21,R0
0003c0 2551      	EOR  R21,R1
0003c1 f072      	BRMI __ADDF127
0003c2 dfcb      	RCALL __UADD12
0003c3 f438      	BRCC __ADDF129
0003c4 9567      	ROR  R22
0003c5 95f7      	ROR  R31
0003c6 95e7      	ROR  R30
0003c7 9573      	INC  R23
0003c8 f413      	BRVC __ADDF129
0003c9 c020      	RJMP __MAXRES
                 __ADDF128:
0003ca dfb7      	RCALL __SWAPACC
                 __ADDF129:
0003cb df3e      	RCALL __REPACK
0003cc 915f      	POP  R21
0003cd 9508      	RET
                 __ADDF1211:
0003ce f7d8      	BRCC __ADDF128
0003cf cffb      	RJMP __ADDF129
                 __ADDF127:
0003d0 1bea      	SUB  R30,R26
0003d1 0bfb      	SBC  R31,R27
0003d2 0b68      	SBC  R22,R24
0003d3 f051      	BREQ __ZERORES
0003d4 f410      	BRCC __ADDF1210
0003d5 9400      	COM  R0
0003d6 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0003d7 2366      	TST  R22
0003d8 f392      	BRMI __ADDF129
0003d9 0fee      	LSL  R30
0003da 1fff      	ROL  R31
0003db 1f66      	ROL  R22
0003dc 957a      	DEC  R23
0003dd f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0003de 27ee      	CLR  R30
0003df 27ff      	CLR  R31
0003e0 2766      	CLR  R22
0003e1 2777      	CLR  R23
0003e2 915f      	POP  R21
0003e3 9508      	RET
                 
                 __MINRES:
0003e4 efef      	SER  R30
0003e5 efff      	SER  R31
0003e6 e76f      	LDI  R22,0x7F
0003e7 ef7f      	SER  R23
0003e8 915f      	POP  R21
0003e9 9508      	RET
                 
                 __MAXRES:
0003ea efef      	SER  R30
0003eb efff      	SER  R31
0003ec e76f      	LDI  R22,0x7F
0003ed e77f      	LDI  R23,0x7F
0003ee 915f      	POP  R21
0003ef 9508      	RET
                 
                 __MULF12:
0003f0 935f      	PUSH R21
0003f1 df2a      	RCALL __UNPACK
0003f2 3870      	CPI  R23,0x80
0003f3 f351      	BREQ __ZERORES
0003f4 3890      	CPI  R25,0x80
0003f5 f341      	BREQ __ZERORES
0003f6 2401      	EOR  R0,R1
0003f7 9408      	SEC
0003f8 1f79      	ADC  R23,R25
0003f9 f423      	BRVC __MULF124
0003fa f31c      	BRLT __ZERORES
                 __MULF125:
0003fb 2000      	TST  R0
0003fc f33a      	BRMI __MINRES
0003fd cfec      	RJMP __MAXRES
                 __MULF124:
0003fe 920f      	PUSH R0
0003ff 931f      	PUSH R17
000400 932f      	PUSH R18
000401 933f      	PUSH R19
000402 934f      	PUSH R20
000403 2711      	CLR  R17
000404 2722      	CLR  R18
000405 2799      	CLR  R25
000406 9f68      	MUL  R22,R24
000407 01a0      	MOVW R20,R0
000408 9f8f      	MUL  R24,R31
000409 2d30      	MOV  R19,R0
00040a 0d41      	ADD  R20,R1
00040b 1f59      	ADC  R21,R25
00040c 9f6b      	MUL  R22,R27
00040d 0d30      	ADD  R19,R0
00040e 1d41      	ADC  R20,R1
00040f 1f59      	ADC  R21,R25
000410 9f8e      	MUL  R24,R30
000411 d027      	RCALL __MULF126
000412 9fbf      	MUL  R27,R31
000413 d025      	RCALL __MULF126
000414 9f6a      	MUL  R22,R26
000415 d023      	RCALL __MULF126
000416 9fbe      	MUL  R27,R30
000417 d01d      	RCALL __MULF127
000418 9faf      	MUL  R26,R31
000419 d01b      	RCALL __MULF127
00041a 9fae      	MUL  R26,R30
00041b 0d11      	ADD  R17,R1
00041c 1f29      	ADC  R18,R25
00041d 1f39      	ADC  R19,R25
00041e 1f49      	ADC  R20,R25
00041f 1f59      	ADC  R21,R25
000420 2fe3      	MOV  R30,R19
000421 2ff4      	MOV  R31,R20
000422 2f65      	MOV  R22,R21
000423 2f52      	MOV  R21,R18
000424 914f      	POP  R20
000425 913f      	POP  R19
000426 912f      	POP  R18
000427 911f      	POP  R17
000428 900f      	POP  R0
000429 2366      	TST  R22
00042a f02a      	BRMI __MULF122
00042b 0f55      	LSL  R21
00042c 1fee      	ROL  R30
00042d 1fff      	ROL  R31
00042e 1f66      	ROL  R22
00042f c002      	RJMP __MULF123
                 __MULF122:
000430 9573      	INC  R23
000431 f24b      	BRVS __MULF125
                 __MULF123:
000432 decd      	RCALL __ROUND_REPACK
000433 915f      	POP  R21
000434 9508      	RET
                 
                 __MULF127:
000435 0d10      	ADD  R17,R0
000436 1d21      	ADC  R18,R1
000437 1f39      	ADC  R19,R25
000438 c002      	RJMP __MULF128
                 __MULF126:
000439 0d20      	ADD  R18,R0
00043a 1d31      	ADC  R19,R1
                 __MULF128:
00043b 1f49      	ADC  R20,R25
00043c 1f59      	ADC  R21,R25
00043d 9508      	RET
                 
                 __DIVF21:
00043e 935f      	PUSH R21
00043f dedc      	RCALL __UNPACK
000440 3870      	CPI  R23,0x80
000441 f421      	BRNE __DIVF210
000442 2011      	TST  R1
                 __DIVF211:
000443 f40a      	BRPL __DIVF219
000444 cf9f      	RJMP __MINRES
                 __DIVF219:
000445 cfa4      	RJMP __MAXRES
                 __DIVF210:
000446 3890      	CPI  R25,0x80
000447 f409      	BRNE __DIVF218
                 __DIVF217:
000448 cf95      	RJMP __ZERORES
                 __DIVF218:
000449 2401      	EOR  R0,R1
00044a 9408      	SEC
00044b 0b97      	SBC  R25,R23
00044c f41b      	BRVC __DIVF216
00044d f3d4      	BRLT __DIVF217
00044e 2000      	TST  R0
00044f cff3      	RJMP __DIVF211
                 __DIVF216:
000450 2f79      	MOV  R23,R25
000451 931f      	PUSH R17
000452 932f      	PUSH R18
000453 933f      	PUSH R19
000454 934f      	PUSH R20
000455 2411      	CLR  R1
000456 2711      	CLR  R17
000457 2722      	CLR  R18
000458 2733      	CLR  R19
000459 2744      	CLR  R20
00045a 2755      	CLR  R21
00045b e290      	LDI  R25,32
                 __DIVF212:
00045c 17ae      	CP   R26,R30
00045d 07bf      	CPC  R27,R31
00045e 0786      	CPC  R24,R22
00045f 0741      	CPC  R20,R17
000460 f030      	BRLO __DIVF213
000461 1bae      	SUB  R26,R30
000462 0bbf      	SBC  R27,R31
000463 0b86      	SBC  R24,R22
000464 0b41      	SBC  R20,R17
000465 9408      	SEC
000466 c001      	RJMP __DIVF214
                 __DIVF213:
000467 9488      	CLC
                 __DIVF214:
000468 1f55      	ROL  R21
000469 1f22      	ROL  R18
00046a 1f33      	ROL  R19
00046b 1c11      	ROL  R1
00046c 1faa      	ROL  R26
00046d 1fbb      	ROL  R27
00046e 1f88      	ROL  R24
00046f 1f44      	ROL  R20
000470 959a      	DEC  R25
000471 f751      	BRNE __DIVF212
000472 01f9      	MOVW R30,R18
000473 2d61      	MOV  R22,R1
000474 914f      	POP  R20
000475 913f      	POP  R19
000476 912f      	POP  R18
000477 911f      	POP  R17
000478 2366      	TST  R22
000479 f032      	BRMI __DIVF215
00047a 0f55      	LSL  R21
00047b 1fee      	ROL  R30
00047c 1fff      	ROL  R31
00047d 1f66      	ROL  R22
00047e 957a      	DEC  R23
00047f f243      	BRVS __DIVF217
                 __DIVF215:
000480 de7f      	RCALL __ROUND_REPACK
000481 915f      	POP  R21
000482 9508      	RET
                 
                 __CMPF12:
000483 2399      	TST  R25
000484 f09a      	BRMI __CMPF120
000485 2377      	TST  R23
000486 f042      	BRMI __CMPF121
000487 1797      	CP   R25,R23
000488 f048      	BRLO __CMPF122
000489 f429      	BRNE __CMPF121
00048a 17ae      	CP   R26,R30
00048b 07bf      	CPC  R27,R31
00048c 0786      	CPC  R24,R22
00048d f020      	BRLO __CMPF122
00048e f031      	BREQ __CMPF123
                 __CMPF121:
00048f 9498      	CLZ
000490 9488      	CLC
000491 9508      	RET
                 __CMPF122:
000492 9498      	CLZ
000493 9408      	SEC
000494 9508      	RET
                 __CMPF123:
000495 9418      	SEZ
000496 9488      	CLC
000497 9508      	RET
                 __CMPF120:
000498 2377      	TST  R23
000499 f7c2      	BRPL __CMPF122
00049a 1797      	CP   R25,R23
00049b f398      	BRLO __CMPF121
00049c f7a9      	BRNE __CMPF122
00049d 17ea      	CP   R30,R26
00049e 07fb      	CPC  R31,R27
00049f 0768      	CPC  R22,R24
0004a0 f388      	BRLO __CMPF122
0004a1 f399      	BREQ __CMPF123
0004a2 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0004a3 95f1      	NEG  R31
0004a4 95e1      	NEG  R30
0004a5 40f0      	SBCI R31,0
0004a6 9508      	RET
                 
                 __ANEGD1:
0004a7 95f0      	COM  R31
0004a8 9560      	COM  R22
0004a9 9570      	COM  R23
0004aa 95e1      	NEG  R30
0004ab 4fff      	SBCI R31,-1
0004ac 4f6f      	SBCI R22,-1
0004ad 4f7f      	SBCI R23,-1
0004ae 9508      	RET
                 
                 __CWD1:
0004af 2f6f      	MOV  R22,R31
0004b0 0f66      	ADD  R22,R22
0004b1 0b66      	SBC  R22,R22
0004b2 2f76      	MOV  R23,R22
0004b3 9508      	RET
                 
                 __MULW12U:
0004b4 9ffa      	MUL  R31,R26
0004b5 2df0      	MOV  R31,R0
0004b6 9feb      	MUL  R30,R27
0004b7 0df0      	ADD  R31,R0
0004b8 9fea      	MUL  R30,R26
0004b9 2de0      	MOV  R30,R0
0004ba 0df1      	ADD  R31,R1
0004bb 9508      	RET
                 
                 __MULW12:
0004bc d004      	RCALL __CHKSIGNW
0004bd dff6      	RCALL __MULW12U
0004be f40e      	BRTC __MULW121
0004bf dfe3      	RCALL __ANEGW1
                 __MULW121:
0004c0 9508      	RET
                 
                 __CHKSIGNW:
0004c1 94e8      	CLT
0004c2 fff7      	SBRS R31,7
0004c3 c002      	RJMP __CHKSW1
0004c4 dfde      	RCALL __ANEGW1
0004c5 9468      	SET
                 __CHKSW1:
0004c6 ffb7      	SBRS R27,7
0004c7 c006      	RJMP __CHKSW2
0004c8 95a0      	COM  R26
0004c9 95b0      	COM  R27
0004ca 9611      	ADIW R26,1
0004cb f800      	BLD  R0,0
0004cc 9403      	INC  R0
0004cd fa00      	BST  R0,0
                 __CHKSW2:
0004ce 9508      	RET
                 
                 __GETD1S0:
0004cf 81e8      	LD   R30,Y
0004d0 81f9      	LDD  R31,Y+1
0004d1 816a      	LDD  R22,Y+2
0004d2 817b      	LDD  R23,Y+3
0004d3 9508      	RET
                 
                 __GETD2S0:
0004d4 81a8      	LD   R26,Y
0004d5 81b9      	LDD  R27,Y+1
0004d6 818a      	LDD  R24,Y+2
0004d7 819b      	LDD  R25,Y+3
0004d8 9508      	RET
                 
                 __PUTD1S0:
0004d9 83e8      	ST   Y,R30
0004da 83f9      	STD  Y+1,R31
0004db 836a      	STD  Y+2,R22
0004dc 837b      	STD  Y+3,R23
0004dd 9508      	RET
                 
                 __PUTPARD1:
0004de 937a      	ST   -Y,R23
0004df 936a      	ST   -Y,R22
0004e0 93fa      	ST   -Y,R31
0004e1 93ea      	ST   -Y,R30
0004e2 9508      	RET
                 
                 __PUTPARD2:
0004e3 939a      	ST   -Y,R25
0004e4 938a      	ST   -Y,R24
0004e5 93ba      	ST   -Y,R27
0004e6 93aa      	ST   -Y,R26
0004e7 9508      	RET
                 
                 __SWAPD12:
0004e8 2e18      	MOV  R1,R24
0004e9 2f86      	MOV  R24,R22
0004ea 2d61      	MOV  R22,R1
0004eb 2e19      	MOV  R1,R25
0004ec 2f97      	MOV  R25,R23
0004ed 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004ee 2e1b      	MOV  R1,R27
0004ef 2fbf      	MOV  R27,R31
0004f0 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004f1 2e1a      	MOV  R1,R26
0004f2 2fae      	MOV  R26,R30
0004f3 2de1      	MOV  R30,R1
0004f4 9508      	RET
                 
                 __SAVELOCR2:
0004f5 931a      	ST   -Y,R17
0004f6 930a      	ST   -Y,R16
0004f7 9508      	RET
                 
                 __LOADLOCR2:
0004f8 8119      	LDD  R17,Y+1
0004f9 8108      	LD   R16,Y
0004fa 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  37 r1 :  33 r2 :   0 r3 :   0 r4 :   6 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   2 
r16:   6 r17:  25 r18:  12 r19:  12 r20:  22 r21:  63 r22:  86 r23:  70 
r24:  64 r25:  57 r26: 110 r27:  55 r28:   7 r29:   1 r30: 202 r31:  80 
x  :  13 y  : 159 z  :   9 
Registers used: 27 out of 35 (77.1%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  10 
adiw  :  12 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   2 brmi  :   9 brne  :  28 brpl  :   9 brsh  :   1 brtc  :   3 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 cbi   :   7 
cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 clr   :  36 
cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  12 cp    :   8 
cpc   :  13 cpi   :  28 cpse  :   0 dec   :  12 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   6 ld    :  44 ldd   :  50 ldi   : 138 lds   :   0 lpm   :   8 
lsl   :  12 lsr   :   3 mov   :  54 movw  :  21 mul   :  12 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   1 ori   :   2 out   :  24 
pop   :  18 push  :  18 rcall : 153 ret   :  65 reti  :   2 rjmp  :  69 
rol   :  24 ror   :  15 sbc   :   8 sbci  :  11 sbi   :   8 sbic  :   1 
sbis  :   1 sbiw  :  11 sbr   :   2 sbrc  :   1 sbrs  :   3 sec   :   5 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   4 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  59 std   :  20 
sts   :   6 sub   :   5 subi  :  15 swap  :   2 tst   :  20 wdr   :   1 

Instructions used: 78 out of 114 (68.4%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009f6   2486     64   2550    8192  31.1%
[.dseg] 0x000060 0x000189      0     41     41    1024   4.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
